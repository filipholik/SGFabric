/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Packet.proto */

#ifndef PROTOBUF_C_Packet_2eproto__INCLUDED
#define PROTOBUF_C_Packet_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct PacketIn PacketIn;
typedef struct PacketOut PacketOut;


/* --- enums --- */


/* --- messages --- */

struct  PacketIn
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
};
#define PACKET_IN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&packet_in__descriptor) \
    , {0,NULL} }


struct  PacketOut
{
  ProtobufCMessage base;
  ProtobufCBinaryData data;
  uint64_t out_port;
};
#define PACKET_OUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&packet_out__descriptor) \
    , {0,NULL}, 0 }


/* PacketIn methods */
void   packet_in__init
                     (PacketIn         *message);
size_t packet_in__get_packed_size
                     (const PacketIn   *message);
size_t packet_in__pack
                     (const PacketIn   *message,
                      uint8_t             *out);
size_t packet_in__pack_to_buffer
                     (const PacketIn   *message,
                      ProtobufCBuffer     *buffer);
PacketIn *
       packet_in__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   packet_in__free_unpacked
                     (PacketIn *message,
                      ProtobufCAllocator *allocator);
/* PacketOut methods */
void   packet_out__init
                     (PacketOut         *message);
size_t packet_out__get_packed_size
                     (const PacketOut   *message);
size_t packet_out__pack
                     (const PacketOut   *message,
                      uint8_t             *out);
size_t packet_out__pack_to_buffer
                     (const PacketOut   *message,
                      ProtobufCBuffer     *buffer);
PacketOut *
       packet_out__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   packet_out__free_unpacked
                     (PacketOut *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PacketIn_Closure)
                 (const PacketIn *message,
                  void *closure_data);
typedef void (*PacketOut_Closure)
                 (const PacketOut *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor packet_in__descriptor;
extern const ProtobufCMessageDescriptor packet_out__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Packet_2eproto__INCLUDED */
